{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate DSA_Sign code for module.cpp"}, {"role": "assistant", "content": "std::optional<component::DSA_Signature> OpenSSL::OpDSA_Sign(operation::DSA_Sign& op) {\n    std::optional<component::DSA_Signature> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    DSA* dsa = nullptr;\n    DSA_SIG* dsa_sig = nullptr;\n    uint8_t* signature = nullptr;\n    unsigned int signature_len;\n    OpenSSL_bignum::Bignum p(ds), q(ds), g(ds), pub(ds), priv(ds);\n    std::string r_str, s_str, pub_str;\n\n    CF_CHECK_EQ(p.Set(op.parameters.p.ToString(ds)), true);\n    CF_CHECK_EQ(q.Set(op.parameters.q.ToString(ds)), true);\n    CF_CHECK_EQ(g.Set(op.parameters.g.ToString(ds)), true);\n\n    /* Prevent time-outs */\n    CF_CHECK_LTE(BN_num_bits(p.GetPtr()), 7000);\n    CF_CHECK_LTE(BN_num_bits(q.GetPtr()), 7000);\n    CF_CHECK_LTE(BN_num_bits(g.GetPtr()), 7000);\n\n    CF_CHECK_TRUE(pub.New());\n    CF_CHECK_EQ(priv.Set(op.priv.ToString(ds)), true);\n\n    CF_CHECK_NE(dsa = DSA_new(), nullptr);\n\n    CF_CHECK_NE(DSA_set0_pqg(dsa, p.GetDestPtr(), q.GetDestPtr(), g.GetDestPtr()), 0);\n\n    p.ReleaseOwnership();\n    q.ReleaseOwnership();\n    g.ReleaseOwnership();\n\n    CF_CHECK_NE(DSA_set0_key(dsa, pub.GetDestPtr(), priv.GetDestPtr()), 0);\n    pub.ReleaseOwnership();\n    priv.ReleaseOwnership();\n\n    signature = util::malloc(DSA_size(dsa));\n    CF_CHECK_NE(DSA_sign(\n                0,\n                op.cleartext.GetPtr(), op.cleartext.GetSize(),\n                signature, &signature_len,\n                dsa), 0);\n\n    {\n        const uint8_t* p = signature;\n        CF_CHECK_NE(dsa_sig = d2i_DSA_SIG(nullptr, &p, signature_len), nullptr);\n        const BIGNUM *r, *s;\n        CF_NORET(DSA_SIG_get0(dsa_sig, &r, &s));\n\n        char* str;\n        CF_CHECK_NE(str = BN_bn2dec(r), nullptr);\n        r_str = str;\n        OPENSSL_free(str);\n\n        CF_CHECK_NE(str = BN_bn2dec(s), nullptr);\n        s_str = str;\n        OPENSSL_free(str);\n\n        CF_CHECK_NE(DSA_generate_key(dsa), 0);\n        const BIGNUM* pub = nullptr;\n        CF_NORET(DSA_get0_key(dsa, &pub, nullptr));\n        CF_CHECK_NE(str = BN_bn2dec(pub), nullptr);\n        pub_str = str;\n        OPENSSL_free(str);\n\n        ret = component::DSA_Signature({r_str, s_str}, pub_str);\n    }\n\nend:\n    CF_NORET(DSA_free(dsa));\n    CF_NORET(DSA_SIG_free(dsa_sig));\n    util::free(signature);\n\n    global_ds = nullptr;\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate DSA_Verify code for module.cpp"}, {"role": "assistant", "content": "std::optional<bool> OpenSSL::OpDSA_Verify(operation::DSA_Verify& op) {\n    std::optional<bool> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    DSA* dsa = nullptr;\n    DSA_SIG* dsa_sig = nullptr;\n    uint8_t* signature = nullptr;\n    OpenSSL_bignum::Bignum p(ds), q(ds), g(ds), r(ds), s(ds), pub(ds);\n    std::string r_str, s_str, pub_str;\n\n    CF_CHECK_EQ(p.Set(op.parameters.p.ToString(ds)), true);\n    CF_CHECK_EQ(q.Set(op.parameters.q.ToString(ds)), true);\n    CF_CHECK_EQ(g.Set(op.parameters.g.ToString(ds)), true);\n    CF_CHECK_EQ(r.Set(op.signature.first.ToString(ds)), true);\n    CF_CHECK_EQ(s.Set(op.signature.second.ToString(ds)), true);\n    CF_CHECK_EQ(pub.Set(op.pub.ToString(ds)), true);\n\n    CF_CHECK_NE(dsa = DSA_new(), nullptr);\n\n    CF_CHECK_NE(DSA_set0_pqg(dsa, p.GetDestPtr(), q.GetDestPtr(), g.GetDestPtr()), 0);\n\n    p.ReleaseOwnership();\n    q.ReleaseOwnership();\n    g.ReleaseOwnership();\n\n    CF_CHECK_NE(DSA_set0_key(dsa, pub.GetDestPtr(), nullptr), 0);\n    pub.ReleaseOwnership();\n\n    {\n        CF_CHECK_NE(dsa_sig = DSA_SIG_new(), nullptr);\n\n        CF_CHECK_NE(DSA_SIG_set0(dsa_sig, r.GetDestPtr(), s.GetDestPtr()), 0);\n        r.ReleaseOwnership();\n        s.ReleaseOwnership();\n\n        const auto siglen = i2d_DSA_SIG(dsa_sig, &signature);\n        CF_CHECK_GT(siglen, 0);\n\n        const auto r = DSA_verify(\n                0,\n                op.cleartext.GetPtr(), op.cleartext.GetSize(),\n                signature, siglen,\n                dsa);\n\n        CF_CHECK_NE(r, -1);\n\n        ret = r;\n    }\n\nend:\n    CF_NORET(DSA_free(dsa));\n    CF_NORET(DSA_SIG_free(dsa_sig));\n    OPENSSL_free(signature);\n\n    global_ds = nullptr;\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Add code for module.cpp"}, {"role": "assistant", "content": "std::optional<component::ECC_Point> OpenSSL::OpECC_Point_Add(operation::ECC_Point_Add& op) {\n    std::optional<component::ECC_Point> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    std::shared_ptr<CF_EC_GROUP> group = nullptr;\n    std::unique_ptr<CF_EC_POINT> a = nullptr, b = nullptr, res = nullptr;\n    char* x_str = nullptr;\n    char* y_str = nullptr;\n\n    {\n        std::optional<int> curveNID;\n        CF_CHECK_NE(curveNID = toCurveNID(op.curveType), std::nullopt);\n        CF_CHECK_NE(group = std::make_shared<CF_EC_GROUP>(ds, *curveNID), nullptr);\n        group->Lock();\n        CF_CHECK_NE(group->GetPtr(), nullptr);\n    }\n\n    CF_CHECK_NE(a = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(a->Set(op.a.first, op.a.second));\n\n    CF_CHECK_NE(b = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(b->Set(op.b.first, op.b.second));\n\n    CF_CHECK_NE(res = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n\n    CF_CHECK_NE(EC_POINT_add(group->GetPtr(), res->GetPtr(), a->GetPtr(), b->GetPtr(), nullptr), 0);\n\n    if ( a->IsProjective() ) {\n        OpenSSL_bignum::BN_CTX ctx(ds);\n        if ( !EC_POINT_is_on_curve(group->GetPtr(), a->GetPtr(), ctx.GetPtr()) ) {\n            goto end;\n        }\n    }\n\n    if ( b->IsProjective() ) {\n        OpenSSL_bignum::BN_CTX ctx(ds);\n        if ( !EC_POINT_is_on_curve(group->GetPtr(), b->GetPtr(), ctx.GetPtr()) ) {\n            goto end;\n        }\n    }\n\n    {\n        OpenSSL_bignum::Bignum x(ds);\n        OpenSSL_bignum::Bignum y(ds);\n\n        CF_CHECK_EQ(x.New(), true);\n        CF_CHECK_EQ(y.New(), true);\n\n#if !defined(CRYPTOFUZZ_BORINGSSL) && !defined(CRYPTOFUZZ_LIBRESSL) && !defined(CRYPTOFUZZ_OPENSSL_102) && !defined(CRYPTOFUZZ_OPENSSL_110) && !defined(CRYPTOFUZZ_OPENSSL_098)\n        CF_CHECK_NE(EC_POINT_get_affine_coordinates(group->GetPtr(), res->GetPtr(), x.GetDestPtr(), y.GetDestPtr(), nullptr), 0);\n#else\n        CF_CHECK_NE(EC_POINT_get_affine_coordinates_GFp(group->GetPtr(), res->GetPtr(), x.GetDestPtr(), y.GetDestPtr(), nullptr), 0);\n#endif\n\n        /* Convert bignum x/y to strings */\n        CF_CHECK_NE(x_str = BN_bn2dec(x.GetPtr()), nullptr);\n        CF_CHECK_NE(y_str = BN_bn2dec(y.GetPtr()), nullptr);\n\n        ret = { std::string(x_str), std::string(y_str) };\n    }\n\nend:\n    OPENSSL_free(x_str);\n    OPENSSL_free(y_str);\n\n    global_ds = nullptr;\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Mul code for module.cpp"}, {"role": "assistant", "content": "std::optional<component::ECC_Point> OpenSSL::OpECC_Point_Mul(operation::ECC_Point_Mul& op) {\n    std::optional<component::ECC_Point> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    std::shared_ptr<CF_EC_GROUP> group = nullptr;\n    std::unique_ptr<CF_EC_POINT> a = nullptr, res = nullptr;\n    OpenSSL_bignum::Bignum b(ds);\n    char* x_str = nullptr;\n    char* y_str = nullptr;\n\n    {\n        std::optional<int> curveNID;\n        CF_CHECK_NE(curveNID = toCurveNID(op.curveType), std::nullopt);\n        CF_CHECK_NE(group = std::make_shared<CF_EC_GROUP>(ds, *curveNID), nullptr);\n        group->Lock();\n        CF_CHECK_NE(group->GetPtr(), nullptr);\n    }\n\n    CF_CHECK_NE(a = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(a->Set(op.a.first, op.a.second));\n\n    CF_CHECK_NE(res = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n\n    CF_CHECK_EQ(b.Set(op.b.ToString(ds)), true);\n\n#if !defined(CRYPTOFUZZ_BORINGSSL)\n    {\n        bool precompute = false;\n        try {\n            precompute = ds.Get<bool>();\n        } catch ( fuzzing::datasource::Datasource::OutOfData& ) {\n        }\n\n        if ( precompute == true ) {\n            CF_CHECK_NE(EC_GROUP_precompute_mult(group->GetPtr(), nullptr), 0);\n        }\n    }\n#endif\n\n    CF_CHECK_NE(EC_POINT_mul(group->GetPtr(), res->GetPtr(), nullptr, a->GetPtr(), b.GetPtr(), nullptr), 0);\n\n    if ( op.b.ToTrimmedString() == \"0\" ) {\n        if ( !a->IsProjective() ) {\n            CF_ASSERT(\n                    EC_POINT_is_at_infinity(group->GetPtr(), res->GetPtr()) == 1,\n                    \"Point multiplication by 0 does not yield point at infinity\");\n        }\n    }\n\n    /* Bug */\n#if !defined(CRYPTOFUZZ_OPENSSL_098)\n    {\n        if ( !a->IsProjective() ) {\n            OpenSSL_bignum::BN_CTX ctx(ds);\n\n            if ( !EC_POINT_is_on_curve(group->GetPtr(), a->GetPtr(), ctx.GetPtr()) ) {\n                CF_ASSERT(\n                        EC_POINT_is_on_curve(group->GetPtr(), res->GetPtr(), ctx.GetPtr()) == 0,\n                        \"Point multiplication of invalid point yields valid point\");\n            }\n        }\n    }\n#endif\n\n    if ( a->IsProjective() ) {\n        OpenSSL_bignum::BN_CTX ctx(ds);\n        if ( !EC_POINT_is_on_curve(group->GetPtr(), a->GetPtr(), ctx.GetPtr()) ) {\n            goto end;\n        }\n    }\n\n    ret = res->Get();\n\nend:\n    OPENSSL_free(x_str);\n    OPENSSL_free(y_str);\n\n    global_ds = nullptr;\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Neg code for module.cpp"}, {"role": "assistant", "content": "std::optional<component::ECC_Point> OpenSSL::OpECC_Point_Neg(operation::ECC_Point_Neg& op) {\n    std::optional<component::ECC_Point> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    std::shared_ptr<CF_EC_GROUP> group = nullptr;\n    std::unique_ptr<CF_EC_POINT> a = nullptr, res = nullptr;\n    char* x_str = nullptr;\n    char* y_str = nullptr;\n\n    {\n        std::optional<int> curveNID;\n        CF_CHECK_NE(curveNID = toCurveNID(op.curveType), std::nullopt);\n        CF_CHECK_NE(group = std::make_shared<CF_EC_GROUP>(ds, *curveNID), nullptr);\n        group->Lock();\n        CF_CHECK_NE(group->GetPtr(), nullptr);\n    }\n\n    CF_CHECK_NE(a = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(a->Set(op.a.first, op.a.second));\n\n    CF_CHECK_NE(EC_POINT_invert(group->GetPtr(), a->GetPtr(), nullptr), 0);\n\n    {\n        OpenSSL_bignum::Bignum x(ds);\n        OpenSSL_bignum::Bignum y(ds);\n\n        CF_CHECK_EQ(x.New(), true);\n        CF_CHECK_EQ(y.New(), true);\n\n#if !defined(CRYPTOFUZZ_BORINGSSL) && !defined(CRYPTOFUZZ_LIBRESSL) && !defined(CRYPTOFUZZ_OPENSSL_102) && !defined(CRYPTOFUZZ_OPENSSL_110) && !defined(CRYPTOFUZZ_OPENSSL_098)\n        CF_CHECK_NE(EC_POINT_get_affine_coordinates(group->GetPtr(), a->GetPtr(), x.GetDestPtr(), y.GetDestPtr(), nullptr), 0);\n#else\n        CF_CHECK_NE(EC_POINT_get_affine_coordinates_GFp(group->GetPtr(), a->GetPtr(), x.GetDestPtr(), y.GetDestPtr(), nullptr), 0);\n#endif\n\n        /* Convert bignum x/y to strings */\n        CF_CHECK_NE(x_str = BN_bn2dec(x.GetPtr()), nullptr);\n        CF_CHECK_NE(y_str = BN_bn2dec(y.GetPtr()), nullptr);\n\n        ret = { std::string(x_str), std::string(y_str) };\n    }\n\nend:\n    OPENSSL_free(x_str);\n    OPENSSL_free(y_str);\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Dbl code for module.cpp"}, {"role": "assistant", "content": "std::optional<component::ECC_Point> OpenSSL::OpECC_Point_Dbl(operation::ECC_Point_Dbl& op) {\n    std::optional<component::ECC_Point> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    std::shared_ptr<CF_EC_GROUP> group = nullptr;\n    std::unique_ptr<CF_EC_POINT> a = nullptr, res = nullptr;\n    char* x_str = nullptr;\n    char* y_str = nullptr;\n\n    {\n        std::optional<int> curveNID;\n        CF_CHECK_NE(curveNID = toCurveNID(op.curveType), std::nullopt);\n        CF_CHECK_NE(group = std::make_shared<CF_EC_GROUP>(ds, *curveNID), nullptr);\n        group->Lock();\n        CF_CHECK_NE(group->GetPtr(), nullptr);\n    }\n\n    CF_CHECK_NE(a = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(a->Set(op.a.first, op.a.second));\n\n    CF_CHECK_NE(res = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n\n    CF_CHECK_NE(EC_POINT_dbl(group->GetPtr(), res->GetPtr(), a->GetPtr(), nullptr), 0);\n\n    {\n        OpenSSL_bignum::Bignum x(ds);\n        OpenSSL_bignum::Bignum y(ds);\n\n        CF_CHECK_EQ(x.New(), true);\n        CF_CHECK_EQ(y.New(), true);\n\n#if !defined(CRYPTOFUZZ_BORINGSSL) && !defined(CRYPTOFUZZ_LIBRESSL) && !defined(CRYPTOFUZZ_OPENSSL_102) && !defined(CRYPTOFUZZ_OPENSSL_110) && !defined(CRYPTOFUZZ_OPENSSL_098)\n        CF_CHECK_NE(EC_POINT_get_affine_coordinates(group->GetPtr(), res->GetPtr(), x.GetDestPtr(), y.GetDestPtr(), nullptr), 0);\n#else\n        CF_CHECK_NE(EC_POINT_get_affine_coordinates_GFp(group->GetPtr(), res->GetPtr(), x.GetDestPtr(), y.GetDestPtr(), nullptr), 0);\n#endif\n\n        /* Convert bignum x/y to strings */\n        CF_CHECK_NE(x_str = BN_bn2dec(x.GetPtr()), nullptr);\n        CF_CHECK_NE(y_str = BN_bn2dec(y.GetPtr()), nullptr);\n\n        ret = { std::string(x_str), std::string(y_str) };\n    }\n\nend:\n    OPENSSL_free(x_str);\n    OPENSSL_free(y_str);\n\n    global_ds = nullptr;\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Cmp code for module.cpp"}, {"role": "assistant", "content": "std::optional<bool> OpenSSL::OpECC_Point_Cmp(operation::ECC_Point_Cmp& op) {\n    std::optional<bool> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    std::shared_ptr<CF_EC_GROUP> group = nullptr;\n    std::unique_ptr<CF_EC_POINT> a = nullptr, b = nullptr;\n\n    {\n        std::optional<int> curveNID;\n        CF_CHECK_NE(curveNID = toCurveNID(op.curveType), std::nullopt);\n        CF_CHECK_NE(group = std::make_shared<CF_EC_GROUP>(ds, *curveNID), nullptr);\n        group->Lock();\n        CF_CHECK_NE(group->GetPtr(), nullptr);\n    }\n\n    CF_CHECK_NE(a = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(a->Set(op.a.first, op.a.second));\n\n    CF_CHECK_NE(b = std::make_unique<CF_EC_POINT>(ds, group, op.curveType.Get()), nullptr);\n    CF_CHECK_TRUE(b->Set(op.b.first, op.b.second));\n\n    ret = EC_POINT_cmp(group->GetPtr(), a->GetPtr(), b->GetPtr(), nullptr) == 0;\n\nend:\n    global_ds = nullptr;\n\n    return ret;\n}\n\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BignumCalc code for module.cpp"}, {"role": "assistant", "content": "std::optional<component::Bignum> OpenSSL::OpBignumCalc(operation::BignumCalc& op) {\n    bool prime_modulus = false;\n\n    if ( op.modulo != std::nullopt ) {\n        if ( op.calcOp.Get() != CF_CALCOP(\"Sqrt(A)\") ) {\n            return std::nullopt;\n        }\n\n        if ( op.modulo->ToTrimmedString() == \"52435875175126190479447740508185965837690552500527637822603658699938581184513\" ) {\n            prime_modulus = true;\n        } else if ( op.modulo->ToTrimmedString() == \"4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787\" ) {\n            prime_modulus = true;\n        } else {\n            return std::nullopt;\n        }\n    }\n\n    std::optional<component::Bignum> ret = std::nullopt;\n    Datasource ds(op.modifier.GetPtr(), op.modifier.GetSize());\n\n    global_ds = &ds;\n\n    try {\n        OpenSSL_bignum::BN_CTX ctx(ds);\n        OpenSSL_bignum::BignumCluster bn(ds,\n                OpenSSL_bignum::Bignum(ds),\n                OpenSSL_bignum::Bignum(ds),\n                OpenSSL_bignum::Bignum(ds),\n                OpenSSL_bignum::Bignum(ds));\n\n        OpenSSL_bignum::Bignum res(ds);\n\n        std::unique_ptr<OpenSSL_bignum::Operation> opRunner = nullptr;\n\n        CF_CHECK_EQ(res.New(), true);\n        CF_CHECK_EQ(bn.New(0), true);\n        CF_CHECK_EQ(bn.New(1), true);\n        CF_CHECK_EQ(bn.New(2), true);\n        CF_CHECK_EQ(bn.New(3), true);\n\n        CF_NORET(res.Randomize());\n        CF_CHECK_EQ(bn.Set(0, op.bn0.ToString(ds)), true);\n        if ( prime_modulus == false ) {\n            CF_CHECK_EQ(bn.Set(1, op.bn1.ToString(ds)), true);\n        } else {\n            CF_CHECK_EQ(bn.Set(1, op.modulo->ToString(ds)), true);\n        }\n        CF_CHECK_EQ(bn.Set(2, op.bn2.ToString(ds)), true);\n        CF_CHECK_EQ(bn.Set(3, op.bn3.ToString(ds)), true);\n\n        switch ( op.calcOp.Get() ) {\n            case    CF_CALCOP(\"Add(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Add>();\n                break;\n            case    CF_CALCOP(\"Sub(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Sub>();\n                break;\n            case    CF_CALCOP(\"Mul(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mul>();\n                break;\n            case    CF_CALCOP(\"Mod(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mod>();\n                break;\n            case    CF_CALCOP(\"ExpMod(A,B,C)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::ExpMod>();\n                break;\n            case    CF_CALCOP(\"Sqr(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Sqr>();\n                break;\n            case    CF_CALCOP(\"GCD(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::GCD>();\n                break;\n            case    CF_CALCOP(\"AddMod(A,B,C)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::AddMod>();\n                break;\n            case    CF_CALCOP(\"SubMod(A,B,C)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::SubMod>();\n                break;\n            case    CF_CALCOP(\"MulMod(A,B,C)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::MulMod>();\n                break;\n            case    CF_CALCOP(\"SqrMod(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::SqrMod>();\n                break;\n            case    CF_CALCOP(\"InvMod(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::InvMod>();\n                break;\n            case    CF_CALCOP(\"Cmp(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Cmp>();\n                break;\n            case    CF_CALCOP(\"Div(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Div>();\n                break;\n            case    CF_CALCOP(\"IsPrime(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsPrime>();\n                break;\n            case    CF_CALCOP(\"Sqrt(A)\"):\n                if ( prime_modulus == false ) {\n                    opRunner = std::make_unique<OpenSSL_bignum::Sqrt>();\n                } else {\n                    opRunner = std::make_unique<OpenSSL_bignum::SqrtMod>();\n                }\n                break;\n            case    CF_CALCOP(\"IsNeg(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsNeg>();\n                break;\n            case    CF_CALCOP(\"IsEq(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsEq>();\n                break;\n            case    CF_CALCOP(\"IsEven(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsEven>();\n                break;\n            case    CF_CALCOP(\"IsOdd(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsOdd>();\n                break;\n            case    CF_CALCOP(\"IsZero(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsZero>();\n                break;\n            case    CF_CALCOP(\"IsOne(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsOne>();\n                break;\n            case    CF_CALCOP(\"Jacobi(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Jacobi>();\n                break;\n#if !defined(CRYPTOFUZZ_BORINGSSL) && !defined(CRYPTOFUZZ_OPENSSL_098) && !defined(CRYPTOFUZZ_LIBRESSL)\n            case    CF_CALCOP(\"Mod_NIST_192(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mod_NIST_192>();\n                break;\n            case    CF_CALCOP(\"Mod_NIST_224(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mod_NIST_224>();\n                break;\n            case    CF_CALCOP(\"Mod_NIST_256(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mod_NIST_256>();\n                break;\n            case    CF_CALCOP(\"Mod_NIST_384(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mod_NIST_384>();\n                break;\n            case    CF_CALCOP(\"Mod_NIST_521(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mod_NIST_521>();\n                break;\n#endif\n#if defined(CRYPTOFUZZ_BORINGSSL)\n            case    CF_CALCOP(\"LCM(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::LCM>();\n                break;\n#endif\n            case    CF_CALCOP(\"Exp(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Exp>();\n                break;\n            case    CF_CALCOP(\"Abs(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Abs>();\n                break;\n            case    CF_CALCOP(\"RShift(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::RShift>();\n                break;\n            case    CF_CALCOP(\"LShift1(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::LShift1>();\n                break;\n            case    CF_CALCOP(\"SetBit(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::SetBit>();\n                break;\n            case    CF_CALCOP(\"ClearBit(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::ClearBit>();\n                break;\n            case    CF_CALCOP(\"Bit(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Bit>();\n                break;\n            case    CF_CALCOP(\"CmpAbs(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::CmpAbs>();\n                break;\n            case    CF_CALCOP(\"ModLShift(A,B,C)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::ModLShift>();\n                break;\n            case    CF_CALCOP(\"IsPow2(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsPow2>();\n                break;\n            case    CF_CALCOP(\"Mask(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Mask>();\n                break;\n            case    CF_CALCOP(\"IsCoprime(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsCoprime>();\n                break;\n            case    CF_CALCOP(\"Rand()\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Rand>();\n                break;\n            case    CF_CALCOP(\"IsSquare(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::IsSquare>();\n                break;\n            case    CF_CALCOP(\"Neg(A)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::Neg>();\n                break;\n            case    CF_CALCOP(\"RandRange(A,B)\"):\n                opRunner = std::make_unique<OpenSSL_bignum::RandRange>();\n                break;\n        }\n\n        CF_CHECK_NE(opRunner, nullptr);\n        CF_CHECK_EQ(opRunner->Run(ds, res, bn, ctx), true);\n\n        ret = res.ToComponentBignum();\n    } catch ( ... ) { }\n\nend:\n    global_ds = nullptr;\n\n    return ret;\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate DSA_Sign code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<component::DSA_Signature> OpDSA_Sign(operation::DSA_Sign& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate DSA_Verify code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<bool> OpDSA_Verify(operation::DSA_Verify& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Add code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<component::ECC_Point> OpECC_Point_Add(operation::ECC_Point_Add& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Mul code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<component::ECC_Point> OpECC_Point_Mul(operation::ECC_Point_Mul& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Neg code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<component::ECC_Point> OpECC_Point_Neg(operation::ECC_Point_Neg& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Dbl code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<component::ECC_Point> OpECC_Point_Dbl(operation::ECC_Point_Dbl& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECC_Point_Cmp code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<bool> OpECC_Point_Cmp(operation::ECC_Point_Cmp& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BignumCalc code for openssl_module.h"}, {"role": "assistant", "content": "        std::optional<component::Bignum> OpBignumCalc(operation::BignumCalc& op) override;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate ECRDSA_Verify code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"ECRDSA_Verify\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate HMAC code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"HMAC\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_ARGON2 code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_ARGON2\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_BCRYPT code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_BCRYPT\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_HKDF code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_HKDF\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_PBKDF code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_PBKDF\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_PBKDF1 code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_PBKDF1\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_PBKDF2 code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_PBKDF2\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_SCRYPT code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_SCRYPT\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_SP_800_108 code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_SP_800_108\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_SRTCP code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_SRTCP\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_SRTP code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_SRTP\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_SSH code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_SSH\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_TLS1_PRF code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_TLS1_PRF\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate KDF_X963 code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"KDF_X963\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"Misc\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"SR25519_Verify\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Schnorr_Sign code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"Schnorr_Sign\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Schnorr_Verify code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"Schnorr_Verify\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SymmetricDecrypt code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"SymmetricDecrypt\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SymmetricEncrypt code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"SymmetricEncrypt\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate UMAC code for gen_repository.py"}, {"role": "assistant", "content": "operations.Add( Operation(\"UMAC\") )"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG2OnCurve code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_IsG2OnCurve& op, const std::optional<bool>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_GenerateKeyPair& op, const std::optional<component::BLS_KeyPair>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_Decompress_G1& op, const std::optional<component::G1>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_Compress_G1& op, const std::optional<component::Bignum>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_Decompress_G2& op, const std::optional<component::G2>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_Compress_G2& op, const std::optional<component::G1>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_Add& op, const std::optional<component::G1>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_Mul& op, const std::optional<component::G1>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_IsEq& op, const std::optional<bool>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_Neg& op, const std::optional<component::G1>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_Add& op, const std::optional<component::G2>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_Mul& op, const std::optional<component::G2>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_IsEq& op, const std::optional<bool>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_Neg& op, const std::optional<component::G2>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for tests.h"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_MultiExp& op, const std::optional<component::G1>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for tests.h"}, {"role": "assistant", "content": "void test(const operation::Misc& op, const std::optional<Buffer>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for tests.h"}, {"role": "assistant", "content": "void test(const operation::SR25519_Verify& op, const std::optional<bool>& result);"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_Compress_G1& op, const std::optional<component::Bignum>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_Decompress_G2& op, const std::optional<component::G2>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_Compress_G2& op, const std::optional<component::G1>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_Add& op, const std::optional<component::G1>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_Mul& op, const std::optional<component::G1>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_IsEq& op, const std::optional<bool>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_Neg& op, const std::optional<component::G1>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_Add& op, const std::optional<component::G2>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_Mul& op, const std::optional<component::G2>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_IsEq& op, const std::optional<bool>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G2_Neg& op, const std::optional<component::G2>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BLS_G1_MultiExp& op, const std::optional<component::G1>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::Misc& op, const std::optional<Buffer>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::SR25519_Verify& op, const std::optional<bool>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BignumCalc code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BignumCalc& op, const std::optional<component::Bignum>& result) {\n    if ( result == std::nullopt ) {\n        return;\n    }\n\n    using namespace BignumCalc;\n\n    const auto calcOp = op.calcOp.Get();\n\n    if (\n            calcOp != CF_CALCOP(\"IsPrime(A)\") &&\n            calcOp != CF_CALCOP(\"Prime()\") ) {\n        /* Negative numbers are not supported yet */\n        if (    op.bn0.IsNegative() ||\n                op.bn1.IsNegative() ||\n                op.bn2.IsNegative() ) {\n            return;\n        }\n    }\n\n    /* Modular calculations are not supported yet */\n    if ( op.modulo != std::nullopt ) {\n        return;\n    }\n\n    switch ( calcOp ) {\n        case    CF_CALCOP(\"Add(A,B)\"):\n            if (    SmallerThan(*result, op.bn0) ||\n                    SmallerThan(*result, op.bn1) ) {\n                Abort(\"Result is smaller than its operands\", repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"Div(A,B)\"):\n            if ( IsZero(op.bn1) ) {\n                Abort(\"Division by zero should not produce a result\", repository::CalcOpToString(calcOp));\n            }\n\n            if ( LargerThan(*result, op.bn0) ) {\n                Abort(\"Result is larger than the dividend\", repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"Mul(A,B)\"):\n            if ( IsZero(op.bn0) || IsZero(op.bn1) ) {\n                if ( !IsZero(*result) ) {\n                    Abort(\"Result of Mul with zero operand is not zero\", repository::CalcOpToString(calcOp));\n                }\n            }\n            break;\n        case    CF_CALCOP(\"Mod(A,B)\"):\n            BignumCalc::AssertModResult(*result, op.bn1, \"Mod\");\n            break;\n        case    CF_CALCOP(\"ExpMod(A,B,C)\"):\n            BignumCalc::AssertModResult(*result, op.bn2, \"ExpMod\");\n            break;\n        case    CF_CALCOP(\"AddMod(A,B,C)\"):\n            BignumCalc::AssertModResult(*result, op.bn2, \"AddMod\");\n            break;\n        case    CF_CALCOP(\"SubMod(A,B,C)\"):\n            BignumCalc::AssertModResult(*result, op.bn2, \"SubMod\");\n            break;\n        case    CF_CALCOP(\"MulMod(A,B,C)\"):\n            BignumCalc::AssertModResult(*result, op.bn2, \"MulMod\");\n            break;\n        case    CF_CALCOP(\"SqrMod(A,B)\"):\n            BignumCalc::AssertModResult(*result, op.bn1, \"SqrMod\");\n            break;\n        case    CF_CALCOP(\"SqrtMod(A,B)\"):\n            BignumCalc::AssertModResult(*result, op.bn1, \"SqrtMod\");\n            break;\n        case    CF_CALCOP(\"ModLShift(A,B,C)\"):\n            BignumCalc::AssertModResult(*result, op.bn2, \"ModLShift\");\n            break;\n        case    CF_CALCOP(\"Bit(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"Bit\");\n            break;\n        case    CF_CALCOP(\"IsCoprime(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"IsCoprime\");\n            break;\n        case    CF_CALCOP(\"IsEq(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"IsEq\");\n            break;\n        case    CF_CALCOP(\"IsGt(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"IsGt\");\n            break;\n        case    CF_CALCOP(\"IsGte(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"IsGte\");\n            break;\n        case    CF_CALCOP(\"IsLt(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"IsLt\");\n            break;\n        case    CF_CALCOP(\"IsLte(A,B)\"):\n            BignumCalc::AssertBinary(*result, \"IsLte\");\n            break;\n        case    CF_CALCOP(\"IsEven(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsEven\");\n            break;\n        case    CF_CALCOP(\"IsOdd(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsOdd\");\n            break;\n        case    CF_CALCOP(\"IsOne(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsOne\");\n            break;\n        case    CF_CALCOP(\"IsPow2(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsPow2\");\n            break;\n        case    CF_CALCOP(\"IsPrime(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsPrime\");\n            if ( !op.bn0.IsPositive() ) {\n                BignumCalc::AssertZero(*result, \"IsPrime\");\n            }\n            if ( result->IsOne() ) {\n                if ( op.bn0.ToTrimmedString() != \"2\" ) {\n                    BignumCalc::AssertOdd(op.bn0, \"IsPrime\");\n                }\n            }\n            break;\n        case    CF_CALCOP(\"IsZero(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsZero\");\n            break;\n        case    CF_CALCOP(\"IsSquare(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsSquare\");\n            break;\n        case    CF_CALCOP(\"IsPower(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsPower\");\n            break;\n        case    CF_CALCOP(\"IsNeg(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsNeg\");\n            break;\n        case    CF_CALCOP(\"IsNotZero(A)\"):\n            BignumCalc::AssertBinary(*result, \"IsNotZero\");\n            break;\n        case    CF_CALCOP(\"Cmp(A,B)\"):\n            BignumCalc::AssertTertiary(*result, \"Cmp\");\n            break;\n        case    CF_CALCOP(\"CmpAbs(A,B)\"):\n            BignumCalc::AssertTertiary(*result, \"CmpAbs\");\n            break;\n        case    CF_CALCOP(\"Jacobi(A,B)\"):\n            BignumCalc::AssertTertiary(*result, \"Jacobi\");\n            break;\n        case    CF_CALCOP(\"Sqr(A)\"):\n            AssertNotSmallerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"RShift(A,B)\"):\n            if ( IsZero(op.bn0) || IsZero(op.bn1) ) {\n                if ( op.bn0.ToTrimmedString() != result->ToTrimmedString() ) {\n                    Abort(\"Zero operand should not alter input\", repository::CalcOpToString(calcOp));\n                }\n            }\n\n            AssertNotLargerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"LShift1(A)\"):\n            if ( IsZero(op.bn0) ) {\n                if ( op.bn0.ToTrimmedString() != result->ToTrimmedString() ) {\n                    Abort(\"Zero input should remain zero\", repository::CalcOpToString(calcOp));\n                }\n            }\n\n            AssertNotSmallerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"SetBit(A,B)\"):\n            AssertNotSmallerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"ClearBit(A,B)\"):\n            AssertNotLargerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"Sqrt(A)\"):\n            AssertNotLargerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"Cbrt(A)\"):\n            AssertNotLargerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"MulAdd(A,B,C)\"):\n            AssertNotSmallerThan(*result, op.bn2, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"Min(A,B)\"):\n        case    CF_CALCOP(\"Max(A,B)\"):\n            if ( !IsEqual(*result, op.bn0) && !IsEqual(*result, op.bn1) ) {\n                Abort(\"Result is not an operand\", repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"Mask(A,B)\"):\n            if ( LargerThan(*result, op.bn0) ) {\n                Abort(\"Result is larger than input\", repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"And(A,B)\"):\n            AssertNotLargerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            AssertNotLargerThan(*result, op.bn1, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"Or(A,B)\"):\n            AssertNotSmallerThan(*result, op.bn0, repository::CalcOpToString(calcOp));\n            AssertNotSmallerThan(*result, op.bn1, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"Nthrt(A,B)\"):\n        case    CF_CALCOP(\"NthrtRem(A,B)\"):\n            if ( IsZero(op.bn1) ) {\n                Abort(\"Root of zero should not produce a result\", repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"Zero()\"):\n            if ( !IsZero(*result) ) {\n                Abort(\"Result should be zero\", repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"GCD(A,B)\"):\n            AssertNotLargerThan(*result, op.bn0, op.bn1, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"LCM(A,B)\"):\n            AssertNotSmallerThan(*result, op.bn0, op.bn1, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"InvMod(A,B)\"):\n            if ( !IsZero(*result) ) {\n                AssertNotLargerThan(*result, op.bn1, repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"Exp(A,B)\"):\n            AssertNotSmallerThan(*result, op.bn0, op.bn1, repository::CalcOpToString(calcOp));\n            break;\n        case    CF_CALCOP(\"RandMod(A)\"):\n            BignumCalc::AssertModResult(*result, op.bn0, \"RandMod\");\n            break;\n        case    CF_CALCOP(\"Prime()\"):\n            BignumCalc::AssertPositive(*result, repository::CalcOpToString(calcOp));\n            if ( result->ToTrimmedString() != \"2\" ) {\n                BignumCalc::AssertOdd(*result, repository::CalcOpToString(calcOp));\n            }\n            break;\n        case    CF_CALCOP(\"RandRange(A,B)\"):\n            AssertNotLargerThan(*result, op.bn1, repository::CalcOpToString(calcOp));\n            break;\n    }\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BignumCalc_Fp2 code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BignumCalc_Fp2& op, const std::optional<component::Fp2>& result) {\n    (void)op;\n    (void)result;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BignumCalc_Fp12 code for tests.cpp"}, {"role": "assistant", "content": "void test(const operation::BignumCalc_Fp12& op, const std::optional<component::Fp12>& result) {\n    (void)op;\n    (void)result;\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG2OnCurve code for operations.h"}, {"role": "assistant", "content": "class BLS_IsG2OnCurve : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G2 g2;\n\n        BLS_IsG2OnCurve(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            g2(ds)\n        { }\n        BLS_IsG2OnCurve(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            g2(json[\"g2_v\"], json[\"g2_w\"], json[\"g2_x\"], json[\"g2_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_IsG2OnCurve& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (g2 == rhs.g2) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            g2.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for operations.h"}, {"role": "assistant", "content": "class BLS_GenerateKeyPair : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::Cleartext ikm;\n        const component::Cleartext info;\n\n        BLS_GenerateKeyPair(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            ikm(ds),\n            info(ds)\n        { }\n\n        BLS_GenerateKeyPair(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            ikm(json[\"ikm\"]),\n            info(json[\"info\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_GenerateKeyPair& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (ikm == rhs.ikm) &&\n                (info == rhs.info) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            ikm.Serialize(ds);\n            info.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for operations.h"}, {"role": "assistant", "content": "class BLS_Decompress_G1 : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::Bignum compressed;\n\n        BLS_Decompress_G1(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            compressed(ds)\n        { }\n        BLS_Decompress_G1(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            compressed(json[\"compressed\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_Decompress_G1& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (compressed == rhs.compressed) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            compressed.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for operations.h"}, {"role": "assistant", "content": "class BLS_Compress_G1 : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G1 uncompressed;\n\n        BLS_Compress_G1(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            uncompressed(ds)\n        { }\n        BLS_Compress_G1(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            uncompressed(json[\"g1_x\"], json[\"g1_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_Compress_G1& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (uncompressed == rhs.uncompressed) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            uncompressed.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for operations.h"}, {"role": "assistant", "content": "class BLS_Decompress_G2 : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G1 compressed;\n\n        BLS_Decompress_G2(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            compressed(ds)\n        { }\n        BLS_Decompress_G2(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            compressed(json[\"g1_x\"], json[\"g1_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_Decompress_G2& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (compressed == rhs.compressed) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            compressed.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for operations.h"}, {"role": "assistant", "content": "class BLS_Compress_G2 : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G2 uncompressed;\n\n        BLS_Compress_G2(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            uncompressed(ds)\n        { }\n        BLS_Compress_G2(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            uncompressed(json[\"g2_v\"], json[\"g2_w\"], json[\"g2_x\"], json[\"g2_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_Compress_G2& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (uncompressed == rhs.uncompressed) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            uncompressed.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for operations.h"}, {"role": "assistant", "content": "class BLS_G1_Add : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G1 a, b;\n\n        BLS_G1_Add(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds),\n            b(ds)\n        { }\n        BLS_G1_Add(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_x\"], json[\"a_y\"]),\n            b(json[\"b_x\"], json[\"b_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G1_Add& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (b == rhs.b) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n            b.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for operations.h"}, {"role": "assistant", "content": "class BLS_G1_IsEq : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G1 a, b;\n\n        BLS_G1_IsEq(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds),\n            b(ds)\n        { }\n        BLS_G1_IsEq(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_x\"], json[\"a_y\"]),\n            b(json[\"b_x\"], json[\"b_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G1_IsEq& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (b == rhs.b) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n            b.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for operations.h"}, {"role": "assistant", "content": "class BLS_G1_Mul : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G1 a;\n        const component::Bignum b;\n\n        BLS_G1_Mul(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds),\n            b(ds)\n        { }\n        BLS_G1_Mul(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_x\"], json[\"a_y\"]),\n            b(json[\"b\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G1_Mul& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (b == rhs.b) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n            b.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for operations.h"}, {"role": "assistant", "content": "class BLS_G1_Neg : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G1 a;\n\n        BLS_G1_Neg(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds)\n        { }\n        BLS_G1_Neg(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_x\"], json[\"a_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G1_Neg& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for operations.h"}, {"role": "assistant", "content": "class BLS_G2_Add : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G2 a, b;\n\n        BLS_G2_Add(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds),\n            b(ds)\n        { }\n        BLS_G2_Add(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_v\"], json[\"a_w\"], json[\"a_x\"], json[\"a_y\"]),\n            b(json[\"b_v\"], json[\"b_w\"], json[\"b_x\"], json[\"b_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G2_Add& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (b == rhs.b) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n            b.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for operations.h"}, {"role": "assistant", "content": "class BLS_G2_IsEq : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G2 a, b;\n\n        BLS_G2_IsEq(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds),\n            b(ds)\n        { }\n        BLS_G2_IsEq(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_v\"], json[\"a_w\"], json[\"a_x\"], json[\"a_y\"]),\n            b(json[\"b_v\"], json[\"b_w\"], json[\"b_x\"], json[\"b_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G2_IsEq& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (b == rhs.b) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n            b.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for operations.h"}, {"role": "assistant", "content": "class BLS_G2_Mul : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G2 a;\n        const component::Bignum b;\n\n        BLS_G2_Mul(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds),\n            b(ds)\n        { }\n        BLS_G2_Mul(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_v\"], json[\"a_w\"], json[\"a_x\"], json[\"a_y\"]),\n            b(json[\"b\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G2_Mul& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (b == rhs.b) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n            b.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for operations.h"}, {"role": "assistant", "content": "class BLS_G2_Neg : public Operation {\n    public:\n        const component::CurveType curveType;\n        const component::G2 a;\n\n        BLS_G2_Neg(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            a(ds)\n        { }\n        BLS_G2_Neg(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            a(json[\"a_v\"], json[\"a_w\"], json[\"a_x\"], json[\"a_y\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G2_Neg& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (a == rhs.a) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            a.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for operations.h"}, {"role": "assistant", "content": "class BLS_G1_MultiExp : public Operation {\n    public:\n        const component::CurveType curveType;\n        component::BLS_G1_Scalar_Vector points_scalars;\n\n        BLS_G1_MultiExp(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            curveType(ds),\n            points_scalars(ds)\n        { }\n        BLS_G1_MultiExp(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            curveType(json[\"curveType\"]),\n            points_scalars(json[\"points_scalars\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const BLS_G1_MultiExp& rhs) const {\n            return\n                (curveType == rhs.curveType) &&\n                (points_scalars == rhs.points_scalars) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            curveType.Serialize(ds);\n            points_scalars.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for operations.h"}, {"role": "assistant", "content": "class Misc : public Operation {\n    public:\n        const Type operation;\n\n        Misc(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            operation(ds)\n        { }\n\n        Misc(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            operation(json[\"operation\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const Misc& rhs) const {\n            return\n                (operation == rhs.operation) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            operation.Serialize(ds);\n        }\n};\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for operations.h"}, {"role": "assistant", "content": "class SR25519_Verify : public Operation {\n    public:\n        const component::Cleartext cleartext;\n        const component::SR25519_Signature signature;\n\n        SR25519_Verify(Datasource& ds, component::Modifier modifier) :\n            Operation(std::move(modifier)),\n            cleartext(ds),\n            signature(ds)\n        { }\n        SR25519_Verify(nlohmann::json json) :\n            Operation(json[\"modifier\"]),\n            cleartext(json[\"cleartext\"]),\n            signature(json[\"signature\"])\n        { }\n\n        static size_t MaxOperations(void) { return 5; }\n        std::string Name(void) const override;\n        std::string ToString(void) const override;\n        nlohmann::json ToJSON(void) const override;\n        inline bool operator==(const SR25519_Verify& rhs) const {\n            return\n                (cleartext == rhs.cleartext) &&\n                (signature == rhs.signature) &&\n                (modifier == rhs.modifier);\n        }\n        void Serialize(Datasource& ds) const {\n            cleartext.Serialize(ds);\n            signature.Serialize(ds);\n        }\n};\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG2OnCurve code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<bool> OpBLS_IsG2OnCurve(operation::BLS_IsG2OnCurve& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::BLS_KeyPair> OpBLS_GenerateKeyPair(operation::BLS_GenerateKeyPair& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G1> OpBLS_Decompress_G1(operation::BLS_Decompress_G1& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::Bignum> OpBLS_Compress_G1(operation::BLS_Compress_G1& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G2> OpBLS_Decompress_G2(operation::BLS_Decompress_G2& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G1> OpBLS_Compress_G2(operation::BLS_Compress_G2& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G1> OpBLS_G1_Add(operation::BLS_G1_Add& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G1> OpBLS_G1_Mul(operation::BLS_G1_Mul& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<bool> OpBLS_G1_IsEq(operation::BLS_G1_IsEq& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G1> OpBLS_G1_Neg(operation::BLS_G1_Neg& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G2> OpBLS_G2_Add(operation::BLS_G2_Add& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G2> OpBLS_G2_Mul(operation::BLS_G2_Mul& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<bool> OpBLS_G2_IsEq(operation::BLS_G2_IsEq& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G2> OpBLS_G2_Neg(operation::BLS_G2_Neg& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<component::G1> OpBLS_G1_MultiExp(operation::BLS_G1_MultiExp& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<Buffer> OpMisc(operation::Misc& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for module.h"}, {"role": "assistant", "content": "        virtual std::optional<bool> OpSR25519_Verify(operation::SR25519_Verify& op) {\n            (void)op;\n            return std::nullopt;\n        }\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG2OnCurve code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_IsG2OnCurve::Name(void) const { return \"BLS_IsG2OnCurve\"; }std::string BLS_IsG2OnCurve::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_IsG2OnCurve\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"G2 V: \" << g2.first.first.ToString() << std::endl;\n    ss << \"G2 W: \" << g2.first.second.ToString() << std::endl;\n    ss << \"G2 X: \" << g2.second.first.ToString() << std::endl;\n    ss << \"G2 Y: \" << g2.second.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_IsG2OnCurve::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_IsG2OnCurve\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"g2_v\"] = g2.first.first.ToJSON();\n    j[\"g2_w\"] = g2.first.second.ToJSON();\n    j[\"g2_x\"] = g2.second.first.ToJSON();\n    j[\"g2_y\"] = g2.second.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_GenerateKeyPair::Name(void) const { return \"BLS_GenerateKeyPair\"; }std::string BLS_GenerateKeyPair::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_GenerateKeyPair\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"ikm: \" << util::HexDump(ikm.Get()) << std::endl;\n    ss << \"info: \" << util::HexDump(info.Get()) << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_GenerateKeyPair::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_GenerateKeyPair\";\n    j[\"curveType\"] = curveType.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    j[\"ikm\"] = ikm.ToJSON();\n    j[\"info\"] = info.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_Decompress_G1::Name(void) const { return \"BLS_Decompress_G1\"; }std::string BLS_Decompress_G1::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_Decompress_G1\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"compressed: \" << compressed.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_Decompress_G1::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_Decompress_G1\";\n    j[\"curveType\"] = curveType.ToJSON();\n    j[\"compressed\"] = compressed.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_Compress_G1::Name(void) const { return \"BLS_Compress_G1\"; }std::string BLS_Compress_G1::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_Compress_G1\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"uncompressed X:\" << uncompressed.first.ToString() << std::endl;\n    ss << \"uncompressed Y:\" << uncompressed.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_Compress_G1::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_Compress_G1\";\n    j[\"curveType\"] = curveType.ToJSON();\n    j[\"g1_x\"] = uncompressed.first.ToJSON();\n    j[\"g1_y\"] = uncompressed.second.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_Decompress_G2::Name(void) const { return \"BLS_Decompress_G2\"; }std::string BLS_Decompress_G2::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_Decompress_G2\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"compressed X: \" << compressed.first.ToString() << std::endl;\n    ss << \"compressed Y: \" << compressed.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_Decompress_G2::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_Decompress_G2\";\n    j[\"curveType\"] = curveType.ToJSON();\n    j[\"g1_x\"] = compressed.first.ToJSON();\n    j[\"g1_y\"] = compressed.second.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_Compress_G2::Name(void) const { return \"BLS_Compress_G2\"; }std::string BLS_Compress_G2::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_Compress_G2\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"uncompressed V:\" << uncompressed.first.first.ToString() << std::endl;\n    ss << \"uncompressed W:\" << uncompressed.first.second.ToString() << std::endl;\n    ss << \"uncompressed X:\" << uncompressed.second.first.ToString() << std::endl;\n    ss << \"uncompressed Y:\" << uncompressed.second.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_Compress_G2::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_Compress_G2\";\n    j[\"curveType\"] = curveType.ToJSON();\n    j[\"g2_v\"] = uncompressed.first.first.ToJSON();\n    j[\"g2_w\"] = uncompressed.first.second.ToJSON();\n    j[\"g2_x\"] = uncompressed.second.first.ToJSON();\n    j[\"g2_y\"] = uncompressed.second.second.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G1_Add::Name(void) const { return \"BLS_G1_Add\"; }std::string BLS_G1_Add::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G1_Add\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A X: \" << a.first.ToString() << std::endl;\n    ss << \"A Y: \" << a.second.ToString() << std::endl;\n    ss << \"B X: \" << b.first.ToString() << std::endl;\n    ss << \"B Y: \" << b.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G1_Add::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G1_Add\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_x\"] = a.first.ToJSON();\n    j[\"a_y\"] = a.second.ToJSON();\n\n    j[\"b_x\"] = b.first.ToJSON();\n    j[\"b_y\"] = b.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G1_Mul::Name(void) const { return \"BLS_G1_Mul\"; }std::string BLS_G1_Mul::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G1_Mul\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A X: \" << a.first.ToString() << std::endl;\n    ss << \"A Y: \" << a.second.ToString() << std::endl;\n    ss << \"B: \" << b.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G1_Mul::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G1_Mul\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_x\"] = a.first.ToJSON();\n    j[\"a_y\"] = a.second.ToJSON();\n\n    j[\"b\"] = b.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G1_IsEq::Name(void) const { return \"BLS_G1_IsEq\"; }std::string BLS_G1_IsEq::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G1_IsEq\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A X: \" << a.first.ToString() << std::endl;\n    ss << \"A Y: \" << a.second.ToString() << std::endl;\n    ss << \"B X: \" << b.first.ToString() << std::endl;\n    ss << \"B Y: \" << b.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G1_IsEq::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"operation\"] = \"BLS_G1_IsEq\";\n    j[\"a_x\"] = a.first.ToJSON();\n    j[\"a_y\"] = a.second.ToJSON();\n\n    j[\"b_x\"] = b.first.ToJSON();\n    j[\"b_y\"] = b.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G1_Neg::Name(void) const { return \"BLS_G1_Neg\"; }std::string BLS_G1_Neg::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G1_Neg\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A X: \" << a.first.ToString() << std::endl;\n    ss << \"A Y: \" << a.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G1_Neg::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G1_Neg\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_x\"] = a.first.ToJSON();\n    j[\"a_y\"] = a.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G2_Add::Name(void) const { return \"BLS_G2_Add\"; }std::string BLS_G2_Add::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G2_Add\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A V:\" << a.first.first.ToString() << std::endl;\n    ss << \"A W:\" << a.first.second.ToString() << std::endl;\n    ss << \"A X:\" << a.second.first.ToString() << std::endl;\n    ss << \"A Y:\" << a.second.second.ToString() << std::endl;\n    ss << \"B V:\" << b.first.first.ToString() << std::endl;\n    ss << \"B W:\" << b.first.second.ToString() << std::endl;\n    ss << \"B X:\" << b.second.first.ToString() << std::endl;\n    ss << \"B Y:\" << b.second.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G2_Add::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G2_Add\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_v\"] = a.first.first.ToJSON();\n    j[\"a_w\"] = a.first.second.ToJSON();\n    j[\"a_x\"] = a.second.first.ToJSON();\n    j[\"a_y\"] = a.second.second.ToJSON();\n\n    j[\"b_v\"] = b.first.first.ToJSON();\n    j[\"b_w\"] = b.first.second.ToJSON();\n    j[\"b_x\"] = b.second.first.ToJSON();\n    j[\"b_y\"] = b.second.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G2_Mul::Name(void) const { return \"BLS_G2_Mul\"; }std::string BLS_G2_Mul::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G2_Mul\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A V:\" << a.first.first.ToString() << std::endl;\n    ss << \"A W:\" << a.first.second.ToString() << std::endl;\n    ss << \"A X:\" << a.second.first.ToString() << std::endl;\n    ss << \"A Y:\" << a.second.second.ToString() << std::endl;\n    ss << \"B: \" << b.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G2_Mul::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G2_Mul\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_v\"] = a.first.first.ToJSON();\n    j[\"a_w\"] = a.first.second.ToJSON();\n    j[\"a_x\"] = a.second.first.ToJSON();\n    j[\"a_y\"] = a.second.second.ToJSON();\n\n    j[\"b\"] = b.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G2_IsEq::Name(void) const { return \"BLS_G2_IsEq\"; }std::string BLS_G2_IsEq::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G2_IsEq\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A V:\" << a.first.first.ToString() << std::endl;\n    ss << \"A W:\" << a.first.second.ToString() << std::endl;\n    ss << \"A X:\" << a.second.first.ToString() << std::endl;\n    ss << \"A Y:\" << a.second.second.ToString() << std::endl;\n    ss << \"B V:\" << b.first.first.ToString() << std::endl;\n    ss << \"B W:\" << b.first.second.ToString() << std::endl;\n    ss << \"B X:\" << b.second.first.ToString() << std::endl;\n    ss << \"B Y:\" << b.second.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G2_IsEq::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G2_IsEq\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_v\"] = a.first.first.ToJSON();\n    j[\"a_w\"] = a.first.second.ToJSON();\n    j[\"a_x\"] = a.second.first.ToJSON();\n    j[\"a_y\"] = a.second.second.ToJSON();\n\n    j[\"b_v\"] = b.first.first.ToJSON();\n    j[\"b_w\"] = b.first.second.ToJSON();\n    j[\"b_x\"] = b.second.first.ToJSON();\n    j[\"b_y\"] = b.second.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G2_Neg::Name(void) const { return \"BLS_G2_Neg\"; }std::string BLS_G2_Neg::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G2_Neg\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n    ss << \"A V:\" << a.first.first.ToString() << std::endl;\n    ss << \"A W:\" << a.first.second.ToString() << std::endl;\n    ss << \"A X:\" << a.second.first.ToString() << std::endl;\n    ss << \"A Y:\" << a.second.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G2_Neg::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"BLS_G2_Neg\";\n    j[\"curveType\"] = curveType.ToJSON();\n\n    j[\"a_v\"] = a.first.first.ToJSON();\n    j[\"a_w\"] = a.first.second.ToJSON();\n    j[\"a_x\"] = a.second.first.ToJSON();\n    j[\"a_y\"] = a.second.second.ToJSON();\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for operation.cpp"}, {"role": "assistant", "content": "std::string BLS_G1_MultiExp::Name(void) const { return \"BLS_G1_MultiExp\"; }std::string BLS_G1_MultiExp::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: BLS_G1_MultiExp\" << std::endl;\n    ss << \"ecc curve: \" << repository::ECC_CurveToString(curveType.Get()) << std::endl;\n\n    for (const auto& point_scalar : points_scalars.points_scalars) {\n        ss << \"    X: \" << point_scalar.first.first.ToString() << std::endl;\n        ss << \"    Y: \" << point_scalar.first.second.ToString() << std::endl;\n        ss << \"    scalar: \" << point_scalar.second.ToString() << std::endl;\n        ss << std::endl;\n    }\n\n    return ss.str();\n}\n\nnlohmann::json BLS_G1_MultiExp::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"curveType\"] = curveType.ToJSON();\n\n    nlohmann::json points_scalars_json = nlohmann::json::array();\n\n    for (const auto& point_scalar : points_scalars.points_scalars) {\n        nlohmann::json ps;\n        ps[\"x\"] = point_scalar.first.first.ToJSON();\n        ps[\"y\"] = point_scalar.first.second.ToJSON();\n        ps[\"scalar\"] = point_scalar.second.ToJSON();\n\n        points_scalars_json.push_back(ps);\n    }\n\n    j[\"points_scalars\"] = points_scalars_json;\n\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for operation.cpp"}, {"role": "assistant", "content": "std::string Misc::Name(void) const { return \"Misc\"; }std::string Misc::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: Misc\" << std::endl;\n    ss << \"operation: \" << std::to_string(operation.Get()) << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json Misc::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = operation.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for operation.cpp"}, {"role": "assistant", "content": "std::string SR25519_Verify::Name(void) const { return \"ECDSA_Verify\"; }std::string SR25519_Verify::ToString(void) const {\n    std::stringstream ss;\n\n    ss << \"operation name: SR25519_Verify\" << std::endl;\n    ss << \"public key: \" << signature.pub.ToString() << std::endl;\n    ss << \"cleartext: \" << util::HexDump(cleartext.Get()) << std::endl;\n    ss << \"signature R: \" << signature.signature.first.ToString() << std::endl;\n    ss << \"signature S: \" << signature.signature.second.ToString() << std::endl;\n\n    return ss.str();\n}\n\nnlohmann::json SR25519_Verify::ToJSON(void) const {\n    nlohmann::json j;\n    j[\"operation\"] = \"SR25519_Verify\";\n    j[\"pub\"] = signature.pub.ToJSON();\n    j[\"cleartext\"] = cleartext.ToJSON();\n    j[\"sig_r\"] = signature.signature.first.ToJSON();\n    j[\"sig_s\"] = signature.signature.second.ToJSON();\n    j[\"modifier\"] = modifier.ToJSON();\n    return j;\n}\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG1 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_HashToG1 = ExecutorBase<component::G1, operation::BLS_HashToG1>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG2 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_HashToG2 = ExecutorBase<component::G2, operation::BLS_HashToG2>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MapToG1 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_MapToG1 = ExecutorBase<component::G1, operation::BLS_MapToG1>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MapToG2 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_MapToG2 = ExecutorBase<component::G2, operation::BLS_MapToG2>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG1OnCurve code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_IsG1OnCurve = ExecutorBase<bool, operation::BLS_IsG1OnCurve>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG2OnCurve code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_IsG2OnCurve = ExecutorBase<bool, operation::BLS_IsG2OnCurve>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_GenerateKeyPair = ExecutorBase<component::BLS_KeyPair, operation::BLS_GenerateKeyPair>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_Decompress_G1 = ExecutorBase<component::G1, operation::BLS_Decompress_G1>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_Compress_G1 = ExecutorBase<component::Bignum, operation::BLS_Compress_G1>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_Decompress_G2 = ExecutorBase<component::G2, operation::BLS_Decompress_G2>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_Compress_G2 = ExecutorBase<component::G1, operation::BLS_Compress_G2>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G1_Add = ExecutorBase<component::G1, operation::BLS_G1_Add>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G1_Mul = ExecutorBase<component::G1, operation::BLS_G1_Mul>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G1_IsEq = ExecutorBase<bool, operation::BLS_G1_IsEq>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G1_Neg = ExecutorBase<component::G1, operation::BLS_G1_Neg>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G2_Add = ExecutorBase<component::G2, operation::BLS_G2_Add>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G2_Mul = ExecutorBase<component::G2, operation::BLS_G2_Mul>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G2_IsEq = ExecutorBase<bool, operation::BLS_G2_IsEq>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G2_Neg = ExecutorBase<component::G2, operation::BLS_G2_Neg>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for executor.h"}, {"role": "assistant", "content": "using ExecutorBLS_G1_MultiExp = ExecutorBase<component::G1, operation::BLS_G1_MultiExp>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for executor.h"}, {"role": "assistant", "content": "using ExecutorMisc = ExecutorBase<Buffer, operation::Misc>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for executor.h"}, {"role": "assistant", "content": "using ExecutorSR25519_Verify = ExecutorBase<bool, operation::SR25519_Verify>;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_GenerateKeyPair */template<> void ExecutorBase<component::BLS_KeyPair, operation::BLS_GenerateKeyPair>::postprocess(std::shared_ptr<Module> module, operation::BLS_GenerateKeyPair& op, const ExecutorBase<component::BLS_KeyPair, operation::BLS_GenerateKeyPair>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto priv = result.second->priv.ToTrimmedString();\n        const auto g1_x = result.second->pub.first.ToTrimmedString();\n        const auto g1_y = result.second->pub.second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( priv.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(priv); }\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::BLS_KeyPair> ExecutorBase<component::BLS_KeyPair, operation::BLS_GenerateKeyPair>::callModule(std::shared_ptr<Module> module, operation::BLS_GenerateKeyPair& op) const {\n    return module->OpBLS_GenerateKeyPair(op);\n}\n\n\ntemplate class ExecutorBase<component::BLS_KeyPair, operation::BLS_GenerateKeyPair>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_Decompress_G1 */template<> void ExecutorBase<component::G1, operation::BLS_Decompress_G1>::postprocess(std::shared_ptr<Module> module, operation::BLS_Decompress_G1& op, const ExecutorBase<component::G1, operation::BLS_Decompress_G1>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g1_x = result.second->first.ToTrimmedString();\n        const auto g1_y = result.second->second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::G1> ExecutorBase<component::G1, operation::BLS_Decompress_G1>::callModule(std::shared_ptr<Module> module, operation::BLS_Decompress_G1& op) const {\n    return module->OpBLS_Decompress_G1(op);\n}\n\n\ntemplate class ExecutorBase<component::G1, operation::BLS_Decompress_G1>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_Compress_G1 */template<> void ExecutorBase<component::Bignum, operation::BLS_Compress_G1>::postprocess(std::shared_ptr<Module> module, operation::BLS_Compress_G1& op, const ExecutorBase<component::Bignum, operation::BLS_Compress_G1>::ResultPair& result) const {\n    (void)module;\n    (void)op;\n\n    if ( result.second != std::nullopt  ) {\n        const auto compressed = result.second->ToTrimmedString();\n\n        if ( compressed.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(compressed); }\n    }\n}\n\ntemplate<> std::optional<component::Bignum> ExecutorBase<component::Bignum, operation::BLS_Compress_G1>::callModule(std::shared_ptr<Module> module, operation::BLS_Compress_G1& op) const {\n    return module->OpBLS_Compress_G1(op);\n}\n\n\ntemplate class ExecutorBase<component::Bignum, operation::BLS_Compress_G1>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_Decompress_G2 */template<> void ExecutorBase<component::G2, operation::BLS_Decompress_G2>::postprocess(std::shared_ptr<Module> module, operation::BLS_Decompress_G2& op, const ExecutorBase<component::G2, operation::BLS_Decompress_G2>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g2_v = result.second->first.first.ToTrimmedString();\n        const auto g2_w = result.second->first.second.ToTrimmedString();\n        const auto g2_x = result.second->second.first.ToTrimmedString();\n        const auto g2_y = result.second->second.second.ToTrimmedString();\n\n        G2AddToPool(curveID, g2_v, g2_w, g2_x, g2_y);\n\n        if ( g2_v.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_v); }\n        if ( g2_w.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_w); }\n        if ( g2_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_x); }\n        if ( g2_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_y); }\n    }\n}\n\ntemplate<> std::optional<component::G2> ExecutorBase<component::G2, operation::BLS_Decompress_G2>::callModule(std::shared_ptr<Module> module, operation::BLS_Decompress_G2& op) const {\n    return module->OpBLS_Decompress_G2(op);\n}\n\n\ntemplate class ExecutorBase<component::G2, operation::BLS_Decompress_G2>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_Compress_G2 */template<> void ExecutorBase<component::G1, operation::BLS_Compress_G2>::postprocess(std::shared_ptr<Module> module, operation::BLS_Compress_G2& op, const ExecutorBase<component::G1, operation::BLS_Compress_G2>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g1_x = result.second->first.ToTrimmedString();\n        const auto g1_y = result.second->second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::G1> ExecutorBase<component::G1, operation::BLS_Compress_G2>::callModule(std::shared_ptr<Module> module, operation::BLS_Compress_G2& op) const {\n    return module->OpBLS_Compress_G2(op);\n}\n\n\ntemplate class ExecutorBase<component::G1, operation::BLS_Compress_G2>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G1_Add */template<> void ExecutorBase<component::G1, operation::BLS_G1_Add>::postprocess(std::shared_ptr<Module> module, operation::BLS_G1_Add& op, const ExecutorBase<component::G1, operation::BLS_G1_Add>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g1_x = result.second->first.ToTrimmedString();\n        const auto g1_y = result.second->second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::G1> ExecutorBase<component::G1, operation::BLS_G1_Add>::callModule(std::shared_ptr<Module> module, operation::BLS_G1_Add& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G1_Add(op);\n}\n\n\ntemplate class ExecutorBase<component::G1, operation::BLS_G1_Add>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G1_Mul */template<> void ExecutorBase<component::G1, operation::BLS_G1_Mul>::postprocess(std::shared_ptr<Module> module, operation::BLS_G1_Mul& op, const ExecutorBase<component::G1, operation::BLS_G1_Mul>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g1_x = result.second->first.ToTrimmedString();\n        const auto g1_y = result.second->second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::G1> ExecutorBase<component::G1, operation::BLS_G1_Mul>::callModule(std::shared_ptr<Module> module, operation::BLS_G1_Mul& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G1_Mul(op);\n}\n\n\ntemplate class ExecutorBase<component::G1, operation::BLS_G1_Mul>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G1_IsEq */template<> void ExecutorBase<bool, operation::BLS_G1_IsEq>::postprocess(std::shared_ptr<Module> module, operation::BLS_G1_IsEq& op, const ExecutorBase<bool, operation::BLS_G1_IsEq>::ResultPair& result) const {\n    (void)module;\n    (void)op;\n    (void)result;\n}\n\ntemplate<> std::optional<bool> ExecutorBase<bool, operation::BLS_G1_IsEq>::callModule(std::shared_ptr<Module> module, operation::BLS_G1_IsEq& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G1_IsEq(op);\n}\n\n\ntemplate class ExecutorBase<bool, operation::BLS_G1_IsEq>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G1_Neg */template<> void ExecutorBase<component::G1, operation::BLS_G1_Neg>::postprocess(std::shared_ptr<Module> module, operation::BLS_G1_Neg& op, const ExecutorBase<component::G1, operation::BLS_G1_Neg>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g1_x = result.second->first.ToTrimmedString();\n        const auto g1_y = result.second->second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::G1> ExecutorBase<component::G1, operation::BLS_G1_Neg>::callModule(std::shared_ptr<Module> module, operation::BLS_G1_Neg& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G1_Neg(op);\n}\n\n\ntemplate class ExecutorBase<component::G1, operation::BLS_G1_Neg>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G2_Add */template<> void ExecutorBase<component::G2, operation::BLS_G2_Add>::postprocess(std::shared_ptr<Module> module, operation::BLS_G2_Add& op, const ExecutorBase<component::G2, operation::BLS_G2_Add>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g2_v = result.second->first.first.ToTrimmedString();\n        const auto g2_w = result.second->first.second.ToTrimmedString();\n        const auto g2_x = result.second->second.first.ToTrimmedString();\n        const auto g2_y = result.second->second.second.ToTrimmedString();\n\n        G2AddToPool(curveID, g2_v, g2_w, g2_x, g2_y);\n\n        if ( g2_v.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_v); }\n        if ( g2_w.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_w); }\n        if ( g2_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_x); }\n        if ( g2_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_y); }\n    }\n}\n\ntemplate<> std::optional<component::G2> ExecutorBase<component::G2, operation::BLS_G2_Add>::callModule(std::shared_ptr<Module> module, operation::BLS_G2_Add& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.second.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.second.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G2_Add(op);\n}\n\n\ntemplate class ExecutorBase<component::G2, operation::BLS_G2_Add>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G2_Mul */template<> void ExecutorBase<component::G2, operation::BLS_G2_Mul>::postprocess(std::shared_ptr<Module> module, operation::BLS_G2_Mul& op, const ExecutorBase<component::G2, operation::BLS_G2_Mul>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g2_v = result.second->first.first.ToTrimmedString();\n        const auto g2_w = result.second->first.second.ToTrimmedString();\n        const auto g2_x = result.second->second.first.ToTrimmedString();\n        const auto g2_y = result.second->second.second.ToTrimmedString();\n\n        G2AddToPool(curveID, g2_v, g2_w, g2_x, g2_y);\n\n        if ( g2_v.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_v); }\n        if ( g2_w.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_w); }\n        if ( g2_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_x); }\n        if ( g2_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_y); }\n    }\n}\n\ntemplate<> std::optional<component::G2> ExecutorBase<component::G2, operation::BLS_G2_Mul>::callModule(std::shared_ptr<Module> module, operation::BLS_G2_Mul& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G2_Mul(op);\n}\n\n\ntemplate class ExecutorBase<component::G2, operation::BLS_G2_Mul>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G2_IsEq */template<> void ExecutorBase<bool, operation::BLS_G2_IsEq>::postprocess(std::shared_ptr<Module> module, operation::BLS_G2_IsEq& op, const ExecutorBase<bool, operation::BLS_G2_IsEq>::ResultPair& result) const {\n    (void)module;\n    (void)op;\n    (void)result;\n}\n\ntemplate<> std::optional<bool> ExecutorBase<bool, operation::BLS_G2_IsEq>::callModule(std::shared_ptr<Module> module, operation::BLS_G2_IsEq& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.second.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.b.second.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G2_IsEq(op);\n}\n\n\ntemplate class ExecutorBase<bool, operation::BLS_G2_IsEq>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G2_Neg */template<> void ExecutorBase<component::G2, operation::BLS_G2_Neg>::postprocess(std::shared_ptr<Module> module, operation::BLS_G2_Neg& op, const ExecutorBase<component::G2, operation::BLS_G2_Neg>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g2_v = result.second->first.first.ToTrimmedString();\n        const auto g2_w = result.second->first.second.ToTrimmedString();\n        const auto g2_x = result.second->second.first.ToTrimmedString();\n        const auto g2_y = result.second->second.second.ToTrimmedString();\n\n        G2AddToPool(curveID, g2_v, g2_w, g2_x, g2_y);\n\n        if ( g2_v.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_v); }\n        if ( g2_w.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_w); }\n        if ( g2_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_x); }\n        if ( g2_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_y); }\n    }\n}\n\ntemplate<> std::optional<component::G2> ExecutorBase<component::G2, operation::BLS_G2_Neg>::callModule(std::shared_ptr<Module> module, operation::BLS_G2_Neg& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    if ( op.a.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    if ( op.a.second.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n\n    return module->OpBLS_G2_Neg(op);\n}\n\n\ntemplate class ExecutorBase<component::G2, operation::BLS_G2_Neg>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_G1_MultiExp */template<> void ExecutorBase<component::G1, operation::BLS_G1_MultiExp>::postprocess(std::shared_ptr<Module> module, operation::BLS_G1_MultiExp& op, const ExecutorBase<component::G1, operation::BLS_G1_MultiExp>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g1_x = result.second->first.ToTrimmedString();\n        const auto g1_y = result.second->second.ToTrimmedString();\n\n        G1AddToPool(curveID, g1_x, g1_y);\n\n        if ( g1_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_x); }\n        if ( g1_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g1_y); }\n    }\n}\n\ntemplate<> std::optional<component::G1> ExecutorBase<component::G1, operation::BLS_G1_MultiExp>::callModule(std::shared_ptr<Module> module, operation::BLS_G1_MultiExp& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n\n    for (const auto& point_scalar : op.points_scalars.points_scalars) {\n        if ( point_scalar.first.first.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n        if ( point_scalar.first.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n        if ( point_scalar.second.GetSize() > config::kMaxBignumSize ) return std::nullopt;\n    }\n\n    return module->OpBLS_G1_MultiExp(op);\n}\n\n\ntemplate class ExecutorBase<component::G1, operation::BLS_G1_MultiExp>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::Misc */template<> void ExecutorBase<Buffer, operation::Misc>::postprocess(std::shared_ptr<Module> module, operation::Misc& op, const ExecutorBase<Buffer, operation::Misc>::ResultPair& result) const {\n    (void)module;\n    (void)op;\n    (void)result;\n}\n\ntemplate<> std::optional<Buffer> ExecutorBase<Buffer, operation::Misc>::callModule(std::shared_ptr<Module> module, operation::Misc& op) const {\n    return module->OpMisc(op);\n}\n\n\ntemplate class ExecutorBase<Buffer, operation::Misc>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG2 code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::BLS_HashToG2 */template<> void ExecutorBase<component::G2, operation::BLS_HashToG2>::postprocess(std::shared_ptr<Module> module, operation::BLS_HashToG2& op, const ExecutorBase<component::G2, operation::BLS_HashToG2>::ResultPair& result) const {\n    (void)module;\n\n    if ( result.second != std::nullopt  ) {\n        const auto curveID = op.curveType.Get();\n        const auto g2_v = result.second->first.first.ToTrimmedString();\n        const auto g2_w = result.second->first.second.ToTrimmedString();\n        const auto g2_x = result.second->second.first.ToTrimmedString();\n        const auto g2_y = result.second->second.second.ToTrimmedString();\n\n        G2AddToPool(curveID, g2_v, g2_w, g2_x, g2_y);\n\n        if ( g2_v.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_v); }\n        if ( g2_w.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_w); }\n        if ( g2_x.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_x); }\n        if ( g2_y.size() <= config::kMaxBignumSize ) { Pool_Bignum.Set(g2_y); }\n    }\n}\n\ntemplate<> std::optional<component::G2> ExecutorBase<component::G2, operation::BLS_HashToG2>::callModule(std::shared_ptr<Module> module, operation::BLS_HashToG2& op) const {\n    RETURN_IF_DISABLED(options.curves, op.curveType.Get());\n    return module->OpBLS_HashToG2(op);\n}\n\n\ntemplate class ExecutorBase<component::G2, operation::BLS_HashToG2>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for executor.cpp"}, {"role": "assistant", "content": "/* Specialization for operation::SR25519_Verify */template<> void ExecutorBase<bool, operation::SR25519_Verify>::postprocess(std::shared_ptr<Module> module, operation::SR25519_Verify& op, const ExecutorBase<bool, operation::SR25519_Verify>::ResultPair& result) const {\n    (void)module;\n    (void)op;\n    (void)result;\n}\n\ntemplate<> std::optional<bool> ExecutorBase<bool, operation::SR25519_Verify>::callModule(std::shared_ptr<Module> module, operation::SR25519_Verify& op) const {\n    return module->OpSR25519_Verify(op);\n}\n\n\ntemplate class ExecutorBase<bool, operation::SR25519_Verify>;"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG1 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_HashToG1 executorBLS_HashToG1(CF_OPERATION(\"BLS_HashToG1\"), modules, options);\n            case CF_OPERATION(\"BLS_HashToG1\"):                executorBLS_HashToG1.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG2 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_HashToG2 executorBLS_HashToG2(CF_OPERATION(\"BLS_HashToG2\"), modules, options);\n            case CF_OPERATION(\"BLS_HashToG2\"):                executorBLS_HashToG2.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MapToG1 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_MapToG1 executorBLS_MapToG1(CF_OPERATION(\"BLS_MapToG1\"), modules, options);\n            case CF_OPERATION(\"BLS_MapToG1\"):                executorBLS_MapToG1.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MapToG2 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_MapToG2 executorBLS_MapToG2(CF_OPERATION(\"BLS_MapToG2\"), modules, options);\n            case CF_OPERATION(\"BLS_MapToG2\"):                executorBLS_MapToG2.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG1OnCurve code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_IsG1OnCurve executorBLS_IsG1OnCurve(CF_OPERATION(\"BLS_IsG1OnCurve\"), modules, options);\n            case CF_OPERATION(\"BLS_IsG1OnCurve\"):                executorBLS_IsG1OnCurve.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_IsG2OnCurve code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_IsG2OnCurve executorBLS_IsG2OnCurve(CF_OPERATION(\"BLS_IsG2OnCurve\"), modules, options);\n            case CF_OPERATION(\"BLS_IsG2OnCurve\"):                executorBLS_IsG2OnCurve.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_GenerateKeyPair code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_GenerateKeyPair executorBLS_GenerateKeyPair(CF_OPERATION(\"BLS_GenerateKeyPair\"), modules, options);\n            case CF_OPERATION(\"BLS_GenerateKeyPair\"):                executorBLS_GenerateKeyPair.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_Decompress_G1 executorBLS_Decompress_G1(CF_OPERATION(\"BLS_Decompress_G1\"), modules, options);\n            case CF_OPERATION(\"BLS_Decompress_G1\"):                executorBLS_Decompress_G1.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_Compress_G1 executorBLS_Compress_G1(CF_OPERATION(\"BLS_Compress_G1\"), modules, options);\n            case CF_OPERATION(\"BLS_Compress_G1\"):                executorBLS_Compress_G1.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_Decompress_G2 executorBLS_Decompress_G2(CF_OPERATION(\"BLS_Decompress_G2\"), modules, options);\n            case CF_OPERATION(\"BLS_Decompress_G2\"):                executorBLS_Decompress_G2.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_Compress_G2 executorBLS_Compress_G2(CF_OPERATION(\"BLS_Compress_G2\"), modules, options);\n            case CF_OPERATION(\"BLS_Compress_G2\"):                executorBLS_Compress_G2.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G1_Add executorBLS_G1_Add(CF_OPERATION(\"BLS_G1_Add\"), modules, options);\n            case CF_OPERATION(\"BLS_G1_Add\"):                executorBLS_G1_Add.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G1_Mul executorBLS_G1_Mul(CF_OPERATION(\"BLS_G1_Mul\"), modules, options);\n            case CF_OPERATION(\"BLS_G1_Mul\"):                executorBLS_G1_Mul.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G1_IsEq executorBLS_G1_IsEq(CF_OPERATION(\"BLS_G1_IsEq\"), modules, options);\n            case CF_OPERATION(\"BLS_G1_IsEq\"):                executorBLS_G1_IsEq.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G1_Neg executorBLS_G1_Neg(CF_OPERATION(\"BLS_G1_Neg\"), modules, options);\n            case CF_OPERATION(\"BLS_G1_Neg\"):                executorBLS_G1_Neg.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G2_Add executorBLS_G2_Add(CF_OPERATION(\"BLS_G2_Add\"), modules, options);\n            case CF_OPERATION(\"BLS_G2_Add\"):                executorBLS_G2_Add.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G2_Mul executorBLS_G2_Mul(CF_OPERATION(\"BLS_G2_Mul\"), modules, options);\n            case CF_OPERATION(\"BLS_G2_Mul\"):                executorBLS_G2_Mul.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G2_IsEq executorBLS_G2_IsEq(CF_OPERATION(\"BLS_G2_IsEq\"), modules, options);\n            case CF_OPERATION(\"BLS_G2_IsEq\"):                executorBLS_G2_IsEq.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G2_Neg executorBLS_G2_Neg(CF_OPERATION(\"BLS_G2_Neg\"), modules, options);\n            case CF_OPERATION(\"BLS_G2_Neg\"):                executorBLS_G2_Neg.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorBLS_G1_MultiExp executorBLS_G1_MultiExp(CF_OPERATION(\"BLS_G1_MultiExp\"), modules, options);\n            case CF_OPERATION(\"BLS_G1_MultiExp\"):                executorBLS_G1_MultiExp.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate Misc code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorMisc executorMisc(CF_OPERATION(\"Misc\"), modules, options);\n            case CF_OPERATION(\"Misc\"):                executorMisc.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for driver.cpp"}, {"role": "assistant", "content": "    static ExecutorSR25519_Verify executorSR25519_Verify(CF_OPERATION(\"SR25519_Verify\"), modules, options);\n\n\n            case CF_OPERATION(\"SR25519_Verify\"):                executorSR25519_Verify.Run(ds, payload.data(), payload.size());\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G1 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_Decompress_G1\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n                    parameters[\"compressed\"] = getBignum();\n\n                    cryptofuzz::operation::BLS_Decompress_G1 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G1 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_Compress_G1\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"g1_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"g1_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"g1_x\"] = getBignum();\n                        parameters[\"g1_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_Compress_G1 op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Decompress_G2 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_Decompress_G2\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n                    parameters[\"g1_x\"] = getBignum();\n                    parameters[\"g1_y\"] = getBignum();\n\n                    cryptofuzz::operation::BLS_Decompress_G2 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Compress_G2 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_Compress_G2\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"g2_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"g2_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"g2_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"g2_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"g2_v\"] = getBignum();\n                        parameters[\"g2_w\"] = getBignum();\n                        parameters[\"g2_x\"] = getBignum();\n                        parameters[\"g2_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_Compress_G2 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG1 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_HashToG1\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n                    parameters[\"cleartext\"] = getBuffer(PRNG() % 1024);\n                    parameters[\"dest\"] = getBool() ? getBuffer(PRNG() % 512) : get_BLS_predefined_DST();\n\n                    parameters[\"aug\"] = getBuffer(PRNG() % 1024);\n\n                    cryptofuzz::operation::BLS_HashToG1 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_HashToG2 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_HashToG2\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n                    parameters[\"cleartext\"] = getBuffer(PRNG() % 1024);\n                    parameters[\"dest\"] = getBool() ? getBuffer(PRNG() % 512) : get_BLS_predefined_DST();\n                    parameters[\"aug\"] = getBuffer(PRNG() % 1024);\n\n                    cryptofuzz::operation::BLS_HashToG2 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MapToG1 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_MapToG1\"):                {\n                    parameters[\"modifier\"] = \"\";\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n                    parameters[\"u\"] = getBignum();\n                    parameters[\"v\"] = getBignum();\n\n                    cryptofuzz::operation::BLS_MapToG1 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MapToG2 code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_MapToG2\"):                {\n                    parameters[\"modifier\"] = \"\";\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n                    parameters[\"u\"][0] = getBignum();\n                    parameters[\"u\"][1] = getBignum();\n                    parameters[\"v\"][0] = getBignum();\n                    parameters[\"v\"][1] = getBignum();\n\n                    cryptofuzz::operation::BLS_MapToG2 op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_Pairing code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_Pairing\"):                {\n                    parameters[\"modifier\"] = \"\";\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"g1_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"g1_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"g1_x\"] = getBignum();\n                        parameters[\"g1_y\"] = getBignum();\n                    }\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"g2_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"g2_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"g2_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"g2_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"g2_v\"] = getBignum();\n                        parameters[\"g2_w\"] = getBignum();\n                        parameters[\"g2_x\"] = getBignum();\n                        parameters[\"g2_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_Pairing op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_MillerLoop code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_MillerLoop\"):                {\n                    parameters[\"modifier\"] = \"\";\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"g1_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"g1_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"g1_x\"] = getBignum();\n                        parameters[\"g1_y\"] = getBignum();\n                    }\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"g2_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"g2_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"g2_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"g2_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"g2_v\"] = getBignum();\n                        parameters[\"g2_w\"] = getBignum();\n                        parameters[\"g2_x\"] = getBignum();\n                        parameters[\"g2_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_MillerLoop op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_FinalExp code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_FinalExp\"):                {\n                    parameters[\"modifier\"] = \"\";\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( Pool_Fp12.Have() && getBool() == true ) {\n                        const auto Fp12 = Pool_Fp12.Get();\n\n                        parameters[\"fp12\"][0] = Fp12.bn1;\n                        parameters[\"fp12\"][1] = Fp12.bn2;\n                        parameters[\"fp12\"][2] = Fp12.bn3;\n                        parameters[\"fp12\"][3] = Fp12.bn4;\n                        parameters[\"fp12\"][4] = Fp12.bn5;\n                        parameters[\"fp12\"][5] = Fp12.bn6;\n                        parameters[\"fp12\"][6] = Fp12.bn7;\n                        parameters[\"fp12\"][7] = Fp12.bn8;\n                        parameters[\"fp12\"][8] = Fp12.bn9;\n                        parameters[\"fp12\"][9] = Fp12.bn10;\n                        parameters[\"fp12\"][10] = Fp12.bn11;\n                        parameters[\"fp12\"][11] = Fp12.bn12;\n                    } else {\n                        parameters[\"fp12\"][0] = getBignum();\n                        parameters[\"fp12\"][1] = getBignum();\n                        parameters[\"fp12\"][2] = getBignum();\n                        parameters[\"fp12\"][3] = getBignum();\n                        parameters[\"fp12\"][4] = getBignum();\n                        parameters[\"fp12\"][5] = getBignum();\n                        parameters[\"fp12\"][6] = getBignum();\n                        parameters[\"fp12\"][7] = getBignum();\n                        parameters[\"fp12\"][8] = getBignum();\n                        parameters[\"fp12\"][9] = getBignum();\n                        parameters[\"fp12\"][10] = getBignum();\n                        parameters[\"fp12\"][11] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_FinalExp op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Add code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G1_Add\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"b_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"b_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"b_x\"] = getBignum();\n                        parameters[\"b_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_G1_Add op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Mul code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G1_Mul\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    parameters[\"b\"] = getBignum();\n\n                    cryptofuzz::operation::BLS_G1_Mul op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_IsEq code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G1_IsEq\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"b_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"b_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"b_x\"] = getBignum();\n                        parameters[\"b_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_G1_IsEq op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_Neg code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G1_Neg\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG1.Have() == true ) {\n                        const auto P = Pool_CurveBLSG1.Get();\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g1_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g1_y);\n                    } else {\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_G1_Neg op(parameters);\n                    op.Serialize(dsOut2);\n\n                    generateECCPoint();\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Add code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G2_Add\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"a_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"a_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"a_v\"] = getBignum();\n                        parameters[\"a_w\"] = getBignum();\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"b_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"b_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"b_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"b_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"b_v\"] = getBignum();\n                        parameters[\"b_w\"] = getBignum();\n                        parameters[\"b_x\"] = getBignum();\n                        parameters[\"b_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_G2_Add op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Mul code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G2_Mul\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"a_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"a_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"a_v\"] = getBignum();\n                        parameters[\"a_w\"] = getBignum();\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    parameters[\"b\"] = getBignum();\n\n                    cryptofuzz::operation::BLS_G2_Mul op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_IsEq code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G2_IsEq\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"a_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"a_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"a_v\"] = getBignum();\n                        parameters[\"a_w\"] = getBignum();\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"b_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"b_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"b_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"b_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"b_v\"] = getBignum();\n                        parameters[\"b_w\"] = getBignum();\n                        parameters[\"b_x\"] = getBignum();\n                        parameters[\"b_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_G2_IsEq op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G2_Neg code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G2_Neg\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1000);\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    if ( getBool() && Pool_CurveBLSG2.Have() == true ) {\n                        const auto P = Pool_CurveBLSG2.Get();\n                        parameters[\"a_v\"] = GET_OR_BIGNUM(P.g2_v);\n                        parameters[\"a_w\"] = GET_OR_BIGNUM(P.g2_w);\n                        parameters[\"a_x\"] = GET_OR_BIGNUM(P.g2_x);\n                        parameters[\"a_y\"] = GET_OR_BIGNUM(P.g2_y);\n                    } else {\n                        parameters[\"a_v\"] = getBignum();\n                        parameters[\"a_w\"] = getBignum();\n                        parameters[\"a_x\"] = getBignum();\n                        parameters[\"a_y\"] = getBignum();\n                    }\n\n                    cryptofuzz::operation::BLS_G2_Neg op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate BLS_G1_MultiExp code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"BLS_G1_MultiExp\"):                {\n                    parameters[\"modifier\"] = \"\";\n                    parameters[\"curveType\"] = hint_ecc_mont(getRandomCurve());\n\n                    const size_t num = (PRNG() % 256) + 2;\n                    parameters[\"points_scalars\"] = nlohmann::json::array();\n\n                    for (size_t i = 0; i < num; i++) {\n                        nlohmann::json ps;\n\n                        if ( Pool_CurveBLSG1.Have() == true ) {\n                            const auto P = Pool_CurveBLSG1.Get();\n                            ps[\"x\"] = P.g1_x;\n                            ps[\"y\"] = P.g1_y;\n                        } else {\n                            ps[\"x\"] = getBignum();\n                            ps[\"y\"] = getBignum();\n                        }\n                        ps[\"scalar\"] = getBignum();\n                        parameters[\"points_scalars\"].push_back(ps);\n                    }\n\n                    cryptofuzz::operation::BLS_G1_MultiExp op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
{"messages": [{"role": "system", "content": "You are a code generator specialized in cryptographic libraries."}, {"role": "user", "content": "Generate SR25519_Verify code for mutator.cpp"}, {"role": "assistant", "content": "            case    CF_OPERATION(\"SR25519_Verify\"):                {\n                    parameters[\"modifier\"] = getBuffer(PRNG() % 1024);\n\n                    parameters[\"signature\"][\"pub\"] = getBignum();\n\n                    parameters[\"signature\"][\"signature\"][0] = getBignum();\n                    parameters[\"signature\"][\"signature\"][1] = getBignum();\n\n                    parameters[\"cleartext\"] = cryptofuzz::util::DecToHex(getBignum(true), (PRNG() % 64) * 2);\n\n                    cryptofuzz::operation::SR25519_Verify op(parameters);\n                    op.Serialize(dsOut2);\n                }\n                break;\n"}]}
